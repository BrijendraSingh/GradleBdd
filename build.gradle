/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
//import groovyx.gpars.GParsExecutorsPool

apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.13.0'
    
    
    testCompile 'io.cucumber:cucumber-java:3.0.2'
    testCompile 'io.cucumber:cucumber-junit:3.0.2'
}

task runM(type: Test){
dependsOn assemble , compileTestJava
doLast{
	println 'hello'
	include '**/RunCuckes.class'
	}
}

task runTest(){
dependsOn assemble , compileTestJava
doLast{
	println 'hello'
	bp()
	//include '**/RunCuckes.class'
	}
}

/*
test {
	filter{
		 includeTestsMatching "*.RunCuckes"
	}
}
*/

def bp_n(){
	println 'Running with parallel forks of:' + System.properties["selenium.parallelForks"]
	def jenkinsForks = System.properties['selenium.parallelForks'] != null ? Integer.parseInt(System.properties['selenium.parallelForks']):5
	println jenkinsForks
	
	def features = fileTree(dir: "${project.projectDir}/src/test/resources/feature").include '**/*.feature'
	println features
	
	file("${project.projectDir}/target/json").list().each{
		f ->
		println f
		println "${project.projectDir}/target/json/${f}"
		//delete "${project.projectDir}/target/json/${f}" 	
	}
	
	file("${project.projectDir}/target/html").list().each{
		f ->
		println f
		println "${project.projectDir}/target/html/${f}"
		//delete "${project.projectDir}/target/html/${f}"
	}
	
	file("${project.projectDir}/target/junit").list().each{
		f ->
		println f
		println "${project.projectDir}/target/junit/${f}"
		//delete "${project.projectDir}/target/junit/${f}"
	}
	
	file("${project.projectDir}/target/rerun").list().each{
		f ->
		println f
		println "${project.projectDir}/target/rerun/${f}"
	}
	
	GParsExecutorsPool.withPool(jenkinsForks){
		features.eachParallel {File file ->
			println "file" + file
			javaexec {
				systemProperty 'selenium.browser', System.properties['selenium.browser']
				
				main = "cucumber.api.cli.Main"
				classpath = configuration.cucumberRuntime + sourceSets.main.output + sourceSets.test.output + (sourceSets.test.runtimeClasspath + files("${projectDir}/src/test/resources"))
				args = ['--tags', "@sample", '--plugin', "junit:target/junit/${file.name}.xml", '--plugin', "html:target/html/${file.name}.html", '--plugin', "json:target/json/${file.name}.json", '--plugin',"rerun:target/rerun/${file.name}_rerun.txt",'-f','pretty','--glue','steps',"${projectDir}/src/test/resources/feature/${file.name}"]
			}
		}
	}
	
}

def bp(){
	println 'Running with parallel forks of:' + System.properties["selenium.browser"]	
	javaexec{	
		systemProperty 'selenium.browser', System.properties['selenium.browser']
	}
	//main = "cucumber.api.cli.Main"
	//classpath = configuration.cucumberRuntime + sourceSets.main.output + sourceSets.test.output + (sourceSets.test.runtimeClasspath + files("${projectDir}/src/test/resources"))
	//args = ['--tags', "@sample", '--plugin', "junit:target/junit/bp.xml", '--plugin', "html:target/html/bp.html", '--plugin', "json:target/json/bp.json", '--plugin',"rerun:target/rerun/bp_rerun.txt",'-f','pretty','--glue','steps',"${projectDir}/src/test/resources/feature"]

}

