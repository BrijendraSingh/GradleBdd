import groovyx.gpars.GParsExecutorsPool

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.13.0'
   	compile 'io.cucumber:cucumber-java:3.0.2'
    compile 'io.cucumber:cucumber-junit:3.0.2'
	compile group: 'net.masterthought', name: 'cucumber-reporting', version: '3.19.0'    
}

buildscript {    
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'org.codehaus.gpars', name: 'gpars', version: '1.1.0'
    }
}

task cucumber(dependsOn: testClasses) {
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'steps', 'src/test/resources']
        }
    }
}

task runParallelCucumberTest(){
	dependsOn assemble , compileTestJava
	doLast{
		println 'Running Parellel Tests.....'
		parallelCucuberTest()
		//CucumberReport()
	}
}

task runParallelFailedTest(){
	dependsOn assemble , compileTestJava
	doLast{
		println 'Re-Running Parellel Failed Tests.....'
		parallelFailedTest()
		//CucumberReport()
	}
}

task runCucumberReport(){	
	doLast{
		CucumberReport()
	}
}

task runRerunFailedCucumberReport(){	
	doLast{
		reRunFailedCucumberReport()
	}
}


def parallelCucuberTest(){
	def features = fileTree(dir: "${project.projectDir}/src/test/resources/feature").include '**/*.feature'
	//println features

	//println 'Running with parallel forks before data:' + System.properties["selenium.parallelForks"]
	def jenkinsForks = System.properties['selenium.parallelForks'] != null ? Integer.parseInt(System.properties['selenium.parallelForks']):1
	//println 'Running with parallel forks after data:' + jenkinsForks	
	//println 'Running on browser:' + System.properties["selenium.browser"]	
	
	file("${project.projectDir}/target/json").list().each{
		f ->
		//println f
		//println "${project.projectDir}/target/json/${f}"
		delete "${project.projectDir}/target/json/${f}" 	
	}
	
	file("${project.projectDir}/target/html").list().each{
		f ->
		//println f
		//println "${project.projectDir}/target/html/${f}"
		delete "${project.projectDir}/target/html/${f}"
	}
	
	file("${project.projectDir}/target/junit").list().each{
		f ->
		//println f
		//println "${project.projectDir}/target/junit/${f}"
		delete "${project.projectDir}/target/junit/${f}"
	}
	
	file("${project.projectDir}/target/rerun").list().each{
		f ->
		//println f
		//println "${project.projectDir}/target/rerun/${f}"
		delete "${project.projectDir}/target/rerun/${f}"
	}

	GParsExecutorsPool.withPool(jenkinsForks){
		features.eachParallel {File file ->
			//println "file" + file
			String fileWithoutExt = file.name.take(file.name.lastIndexOf('.'))
			println fileWithoutExt + "******************"
			javaexec{	
				systemProperty 'selenium.browser', System.properties['selenium.browser']		       
		        main = "cucumber.api.cli.Main"
		        classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
		        //args = ['--plugin', 'pretty', '--glue', 'steps', 'src/test/resources']
		        args = ['--tags', "@sample", '--plugin','pretty','--plugin', "junit:target/junit/${fileWithoutExt}.xml", '--plugin', "html:target/html/${fileWithoutExt}.html", '--plugin', "json:target/json/${fileWithoutExt}.json", '--plugin',"rerun:target/rerun/${fileWithoutExt}_rerun.txt",'--glue','steps',"${projectDir}/src/test/resources/feature/${file.name}"]
			}
		}
	}
}



def parallelFailedTest(){
	def rerun = fileTree(dir: "${project.projectDir}/target/rerun").include '**/*rerun.txt'
	println "Failed Rerun file:--->" + rerun
	def jenkinsForks = System.properties['selenium.parallelForks'] != null ? Integer.parseInt(System.properties['selenium.parallelForks']):1
	
	file("${project.projectDir}/target/rerun_output_files/json").list().each{
		f ->
		delete "${project.projectDir}/target/rerun_output_files/json/${f}" 	
	}
	
	file("${project.projectDir}/target/rerun_output_files/html").list().each{
		f ->
		delete "${project.projectDir}/target/rerun_output_files/html/${f}"
	}
	
	file("${project.projectDir}/target/rerun_output_files/junit").list().each{
		f ->
		delete "${project.projectDir}/target/rerun_output_files/junit/${f}"
	}
	
	file("${project.projectDir}/target/rerun_output_files/rerun").list().each{
		f ->
		delete "${project.projectDir}/target/rerun_output_files/rerun/${f}"
	}
	
	GParsExecutorsPool.withPool(jenkinsForks){
		rerun.eachParallel {File file ->
			String fileWithoutExt = file.name.take(file.name.lastIndexOf('.'))
			println fileWithoutExt + "******************"
			javaexec{	
				systemProperty 'selenium.browser', System.properties['selenium.browser']		       
		        main = "cucumber.api.cli.Main"
		        classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
		        args = ['--plugin','pretty','--plugin', "junit:target/rerun_output_files/junit/${fileWithoutExt}.xml", '--plugin', "html:target/rerun_output_files/html/${fileWithoutExt}.html", '--plugin', "json:target/rerun_output_files/json/${fileWithoutExt}.json", '--plugin',"rerun:target/rerun_output_files/rerun/${fileWithoutExt}_rerun.txt",'--glue','steps',"@${projectDir}/target/rerun/${file.name}"]
			}
		}
	}
}


def CucumberReport(){
	println "Generating Cucumber Report......"
	javaexec{	
	        main = "utils.GenerateReports"
	        classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
	        args = []
			}
}

def reRunFailedCucumberReport(){
	println "Generating Cucumber Report......"
	javaexec{	
	        main = "utils.GenerateFailedRerunReport"
	        classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
	        args = []
			}
}



