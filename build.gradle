import groovyx.gpars.GParsExecutorsPool

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.13.0'
    testCompile 'io.cucumber:cucumber-java:3.0.2'
    testCompile 'io.cucumber:cucumber-junit:3.0.2'
	compile group: 'net.masterthought', name: 'cucumber-reporting', version: '3.19.0'    
}

buildscript {    
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'org.codehaus.gpars', name: 'gpars', version: '1.1.0'
    }
}

task cucumber(dependsOn: testClasses) {
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'steps', 'src/test/resources']
        }
    }
}

task runTest(){
dependsOn assemble , compileTestJava
doLast{
	println 'hello'
	bp()
	CucumberReport()
	}
}

test {
	doLast{
		//cucumber()
	}
}

def bp_n(){
	println 'Running with parallel forks of:' + System.properties["selenium.parallelForks"]
	def jenkinsForks = System.properties['selenium.parallelForks'] != null ? Integer.parseInt(System.properties['selenium.parallelForks']):5
	println jenkinsForks
	
	def features = fileTree(dir: "${project.projectDir}/src/test/resources/feature").include '**/*.feature'
	println features
	
	file("${project.projectDir}/target/json").list().each{
		f ->
		println f
		println "${project.projectDir}/target/json/${f}"
		//delete "${project.projectDir}/target/json/${f}" 	
	}
	
	file("${project.projectDir}/target/html").list().each{
		f ->
		println f
		println "${project.projectDir}/target/html/${f}"
		//delete "${project.projectDir}/target/html/${f}"
	}
	
	file("${project.projectDir}/target/junit").list().each{
		f ->
		println f
		println "${project.projectDir}/target/junit/${f}"
		//delete "${project.projectDir}/target/junit/${f}"
	}
	
	file("${project.projectDir}/target/rerun").list().each{
		f ->
		println f
		println "${project.projectDir}/target/rerun/${f}"
	}
	
	GParsExecutorsPool.withPool(jenkinsForks){
		features.eachParallel {File file ->
			println "file" + file
			javaexec {
				systemProperty 'selenium.browser', System.properties['selenium.browser']
				
				main = "cucumber.api.cli.Main"
				classpath = configuration.cucumberRuntime + sourceSets.main.output + sourceSets.test.output + (sourceSets.test.runtimeClasspath + files("${projectDir}/src/test/resources"))
				args = ['--tags', "@sample", '--plugin', "junit:target/junit/${file.name}.xml", '--plugin', "html:target/html/${file.name}.html", '--plugin', "json:target/json/${file.name}.json", '--plugin',"rerun:target/rerun/${file.name}_rerun.txt",'-f','pretty','--glue','steps',"${projectDir}/src/test/resources/feature/${file.name}"]
			}
		}
	}
	
}

def bp(){
	def features = fileTree(dir: "${project.projectDir}/src/test/resources/feature").include '**/*.feature'
	println features

	println 'Running with parallel forks of:' + System.properties["selenium.parallelForks"]
	def jenkinsForks = System.properties['selenium.parallelForks'] != null ? Integer.parseInt(System.properties['selenium.parallelForks']):5
	println jenkinsForks
	
	println 'Running with parallel forks of:' + System.properties["selenium.browser"]	
	
	file("${project.projectDir}/target/json").list().each{
		f ->
		println f
		println "${project.projectDir}/target/json/${f}"
		delete "${project.projectDir}/target/json/${f}" 	
	}
	
	file("${project.projectDir}/target/html").list().each{
		f ->
		println f
		println "${project.projectDir}/target/html/${f}"
		delete "${project.projectDir}/target/html/${f}"
	}
	
	file("${project.projectDir}/target/junit").list().each{
		f ->
		println f
		println "${project.projectDir}/target/junit/${f}"
		delete "${project.projectDir}/target/junit/${f}"
	}
	
	file("${project.projectDir}/target/rerun").list().each{
		f ->
		println f
		println "${project.projectDir}/target/rerun/${f}"
	}


	GParsExecutorsPool.withPool(jenkinsForks){
		features.eachParallel {File file ->
			println "file" + file
			javaexec{	
				systemProperty 'selenium.browser', System.properties['selenium.browser']
		       
		        main = "cucumber.api.cli.Main"
		        classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
		        //args = ['--plugin', 'pretty', '--glue', 'steps', 'src/test/resources']
		        args = ['--tags', "@sample", '--plugin','pretty','--plugin', "junit:target/junit/${file.name}.xml", '--plugin', "html:target/html/${file.name}.html", '--plugin', "json:target/json/${file.name}.json", '--plugin',"rerun:target/rerun/${file.name}_rerun.txt",'--glue','steps',"${projectDir}/src/test/resources/feature/${file.name}"]
			}
		}
	}	
}

def CucumberReport(){
	println "Generating Cucumber Report......"
	javaexec{	
	        main = "utils.GenerateReports"
	        classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
	        args = []
			}
}

task runCucumberReport(){	
	doLast{
		CucumberReport()
	}
}

